=====================================
Installing MCP and Setting Up Project
=====================================

Pre-requisites
==============

Before installing MCP and setting up your development environment, make sure you have the following:

- **Python 3.10 or later**

Optional but Recommended:

- **`uv` package manager** for faster and reproducible dependency management

Step-by-step Guide
==================

Step 1: Install UV (Optional)
-----------------------------

UV is a fast Python package manager designed for performance and reproducibility.

- Docs: https://docs.astral.sh/uv/getting-started/installation/

Key Benefits:
- **Fast and reliable dependency resolution**
- **Automatic virtual environment management**
- **Reproducible lock files for consistent environments**

**For macOS / Linux**:

.. code-block:: bash

   curl -LsSf https://astral.sh/uv/install.sh | sh

**For Windows**:

.. code-block:: powershell

   powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"

Step 2: Create a New MCP Project
--------------------------------

Use `uv` to scaffold a new project directory:

.. code-block:: bash

   uv init my_mcp_project
   cd my_mcp_project

Step 3: Set Up a Virtual Environment
------------------------------------

Create and activate a virtual environment:

.. code-block:: bash

   uv venv
   source .venv/bin/activate

Step 4: Install MCP and Other Dependencies
------------------------------------------

Use `uv add` to install required packages. For example:

.. code-block:: bash

   uv add "mcp[cli]" pandas pyarrow

This updates your `pyproject.toml` and installs the packages into your virtual environment.

Step 5: Import and Use MCP in Your Code
---------------------------------------

You can now start writing code using MCP:

.. code-block:: python

   from fastmcp import FastMCP
   from mcp.server.fastmcp import FastMCP

Optional: Define Resources, Prompts, and Tools
==============================================

MCP supports structured function and resource declarations using decorators.

Define a Resource
-----------------

Use `mcp.resource()` to define a data object:

.. code-block:: python

   import mcp
   from dataclasses import dataclass

   @mcp.resource()
   @dataclass
   class UserProfile:
       name: str
       age: int
       interests: list[str]

Define a Prompt Template
------------------------

Use `mcp.prompt()` for reusable, parameterized prompts:

.. code-block:: python

   import mcp

   @mcp.prompt()
   def movie_recommendation(genre: str) -> str:
       """Recommend a movie based on a genre."""
       return f"Recommend a popular movie in the {genre} genre."

Define a Callable Tool
----------------------

Use `mcp.tool()` for tool functions that MCP can invoke:

.. code-block:: python

   import mcp

   @mcp.tool()
   def add(a: int, b: int) -> int:
       """Add two numbers."""
       return a + b


Notes
=====

- MCP servers should run in isolated virtual environments to avoid conflicts with system packages.
- Lock files generated by `uv` ensure identical environments across machines.
- All functions decorated with `mcp.tool()`, `mcp.resource()`, and `mcp.prompt()` are registered and discoverable by the MCP engine.
